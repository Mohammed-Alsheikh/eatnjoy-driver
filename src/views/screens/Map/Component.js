/* eslint-disable react-hooks/exhaustive-deps */
import React, {useState, useEffect} from 'react';
import {StyleSheet, View, Image} from 'react-native';
import Geolocation from 'react-native-geolocation-service';
import {Button, Appbar} from 'react-native-paper';
import MapView, {Marker} from 'react-native-maps';
import isEqual from 'lodash/isEqual';
import reactotron from 'reactotron-react-native';
import permision from './permision';
import MapViewDirections from 'react-native-maps-directions';
import {Switch} from 'react-native-paper';
import {ActivityIndecator} from '../../lib';
import Colors, {width, height} from '../../styles';
import {
  GEOLOCATION_OPTIONS,
  GEOLOCATION_OPTIONS_WATCH,
  ASPECT_RATIO,
  LATITUDE,
  LONGITUDE,
  LATITUDE_DELTA,
  LONGITUDE_DELTA,
  SPACE,
  API_KEY,
} from './config';
import Details from './Details';
import {getLoactionObj, updateLocation, checkDriver} from './actions';
import PushNotification from 'react-native-push-notification';
const DRIVER = require('../../../assets/driver.png');

export default ({navigation, setRequest, request}) => {
  const [detailsVisible, setDetailsVisible] = useState(false);
  const [my, setMy] = useState({
    latitude: LATITUDE - SPACE,
    longitude: LONGITUDE - SPACE,
  });

  const [switchOn, setSwitchOn] = useState(false);
  const [coordinate, setCoordinate] = useState(null);

  const notify = (time = 0) => {
    PushNotification.localNotification({
      id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      autoCancel: true, // (optional) default: true
      largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
      vibrate: true, // (optional) default: true
      vibration: 500, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: 'group', // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification
      priority: 'high', // (optional) set notification priority, default: high
      visibility: 'private', // (optional) set notification visibility, default: private
      importance: 'high', // (optional) set notification importance, default: high
      title: 'New Delivery!', // (optional)
      message: 'Time in kitchen ' + String(time) + ' minutes', // (required)
      playSound: true, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    });
  };

  const Clear = () => {};

  useEffect(() => {
    permision();
    PushNotification.configure({
      onRegister: function(token) {
        reactotron.log('TOKEN:', token);
      },
      onNotification: function(notification) {},
      senderID: 'YOUR GCM (OR FCM) SENDER ID',

      permissions: {
        alert: true,
        badge: true,
        sound: true,
      },
      popInitialNotification: true,
      requestPermissions: true,
    });

    Geolocation.getCurrentPosition(
      position => {
        setCoordinate({
          ...position.coords,
          latitudeDelta: LATITUDE_DELTA,
          longitudeDelta: LONGITUDE_DELTA,
        });
        setMy({
          ...position.coords,
        });
      },
      err => {},
      GEOLOCATION_OPTIONS,
    );

    const watchID = (async () => {
      const o = await getLoactionObj();

      Geolocation.watchPosition(
        position => {
          const current = {
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
          };

          if (!isEqual(my, current)) {
            updateLocation(current, o);
          }

          setMy(current);
        },
        err => {},
        GEOLOCATION_OPTIONS_WATCH,
      );
    })();

    return () => {
      Geolocation.clearWatch(watchID);
    };
  }, []);

  const getMapRegion = () => ({
    latitude: my.latitude,
    longitude: my.longitude,
    latitudeDelta: LATITUDE_DELTA,
    longitudeDelta: LONGITUDE_DELTA,
  });

  if (!coordinate) {
    return <ActivityIndecator />;
  }

  return (
    <View style={{flex: 1}}>
      <Appbar.Header style={{zIndex: 3}}>
        <Appbar.Content
          title="EatnJoy Driver"
          subtitle={switchOn ? 'Online' : 'Offline'}
        />
        <Switch
          value={switchOn}
          onValueChange={() => {
            checkDriver(!switchOn, coordinate, setRequest, notify);
            if (switchOn) {
              Clear();
            }
            setSwitchOn(!switchOn);
          }}
          color="pink"
        />
      </Appbar.Header>
      <View style={styles.container}>
        <MapView style={styles.map} loadingEnabled region={getMapRegion()}>
          <Marker coordinate={my} title="My Location">
            <Image
              source={DRIVER}
              resizeMethod="resize"
              resizeMode="contain"
              style={{width: 50, height: 50}}
            />
          </Marker>
          {request && (
            <MapViewDirections
              origin={{
                longitude: my.longitude,
                latitude: my.latitude,
              }}
              destination={{
                longitude: request?.location?.longitude,
                latitude: request?.location?.latitude,
              }}
              apikey={API_KEY}
              strokeWidth={2.4}
              strokeColor={Colors.primary}
            />
          )}
        </MapView>
        {request && (
          <Button
            onPress={() => setDetailsVisible(true)}
            mode="contained"
            style={{position: 'absolute', bottom: 24}}>
            {'See Details'}
          </Button>
        )}
        {detailsVisible && request && (
          <Details
            visible={detailsVisible}
            setVisible={setDetailsVisible}
            request={request}
          />
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    ...StyleSheet.absoluteFillObject,
    justifyContent: 'flex-end',
    alignItems: 'center',
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },
});
